## 문제 1

### 세로가 n칸이고, 가로가 1칸인 컨베이어 벨트가 m개 존재한다. 
각 벨트 속에는 1칸 크기의 로봇팔이 존재한다. 
로봇팔은 컨베이어 벨트에서 정해진 방향으로 이동한다. 
로봇팔은 끝칸(맨 앞, 맨 뒤)에 도착할 경우 현재 움직이는 방향의 반대 방향으로 움직인다. 
각 컨베이어 벨트에는 버튼이 있다. 각 벨트에 달린 버튼을 누르면 해당 벨트의 로봇 팔은 더 이상 움직이지 않는다. 
시간 1이 지날 때마다 버튼을 한 번 누를 수 있다. (단, 시간이 0일 때는 누를 수 없다)
당신은 각 컨베이어 벨트의 버튼을 사용하여 모든 로봇팔들을 하나의 행에 고정하려 한다.
컨베이어 벨트 길이는 n, 컨베이어 벨트 개수는 m, 로봇팔의 위치와 방향 나타내는 2차원 배열 arms가 매개변수로 주어진다.

test_case
n = 4, m = 5, arms = [[1,1],[2,1],[4,-1],[3,-1],[3,1]], result = 5
n = 6, m = 2, arms = [[1,1],[1,1]], result = 6


## 문제 2

### 배출구가 n개, 파이프가 m개인 저수조가 있다. 
저수조는 2차원 평면을 통해서 표현이 가능하다. 
저수조의 좌표는 (0,0)이다. 
저수조에서 출발해서 1부터 n번까지의 배출구로 각각 물을 보내기 위한 최단 경로를 탐색하고 싶다. 
물은 파이프를 통해서만 이동이 가능하다. 
배출구의 위치가 담긴 outlet 배열, 파이프의 정보가 담긴 pipe 배열이 매개변수로 주어진다.

long long * solution(int **outlet, size_t outlet_rows, size_t outlet_cols, int **pipe, size_t pipe_rows, size_t pipe_cols)

return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.

test_case
outlet = [[-1,3],[2,3],[-3,1],[2,-1]] 
pipe = [[-3,3,2,3],[-3,1,-1,1],[-2,0,0,0],[-2,-2,2,-2],[-2,0,-2,3],[-1,-2,-1,0],[2,-3,2,3]] 
result = [6,9,4,7]

outlet = [[2,6],[4,3],[4,-2]]
pipe = [[0,5,4,5],[3,3,5,3],[0,0,5,0],[2,-1,4,-1],[2,-1,2,6],[4,3,4,5],[5,0,5,3],[4,-2,4,-1]]
result = [8,9,6]

outlet = [[1000000, -1000000]]
pipe = [[0,0,0,1000000],[0,1000000,1000000,1000000],[1000000,-1000000,1000000,1000000]]
result = [4000000]